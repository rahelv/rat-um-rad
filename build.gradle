plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'jacoco'
}

javafx {
    version = "19.0.2.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.web']
}

group 'ch.progradler'
version '0.0.1-ALPHA'
mainClassName = 'ch.progradler.rat_um_rad.Main'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

//adds maven central as a maven repository
repositories {
    mavenCentral()
}

/* The following lines are extensively documented. Please remove the documentation when you have read and understood it. */
dependencies {
    // EXAMPLE: LOGGING
    /*
    The following adds the logging framework Apache Log4J2.
    The statements serve as an example on how to use libraries.
    Since these are `implementation` dependencies, they are packed in the final jar.
    Read the documentation at https://docs.gradle.org/current/userguide/declaring_dependencies.html to learn more
     */
    //implementation 'org.apache.logging.log4j:log4j-api:2.+'
    //implementation 'org.apache.logging.log4j:log4j-core:2.+'

    /*
    This is another example - it imports the javafx-controls dependency
     */
    implementation 'org.openjfx:javafx-controls:19.0.2.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    // JUNIT
    /*
    The following dependency is required to perform JUnit tests, as for example HelloWorldTest.
    Since it is a `testCompile` dependency, it will not be part of the final product, only during testing.
     */
    testImplementation("org.junit.jupiter:junit-jupiter:5.+")
    testImplementation 'org.mockito:mockito-inline:5.+'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.+'
}

test {
    useJUnitPlatform()
}

/*
The following block adds both compile and runtime dependencies to the jar
 */
jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Multi-Release': true
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.register('build-cs108') {
    dependsOn build
    dependsOn javadoc
    dependsOn clean

    javadoc.mustRunAfter(clean)
    build.mustRunAfter(javadoc)
}